/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

/**
 *
 * @author Steve Karanja
 */

import database.DBConnection;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ManageUsers extends javax.swing.JFrame {

    /**
     * Creates new form ManageUsers
     */
    
    int mouseX;
    int mouseY;
    
    public ManageUsers() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        btnChooseSubjects = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnDashboard = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        subjectsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 250, 154));

        jLabel1.setBackground(new java.awt.Color(0, 250, 154));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MANAGE USERS");

        userLabel.setBackground(new java.awt.Color(0, 250, 154));
        userLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolgrades/Misc-User-icon.png"))); // NOI18N
        userLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userLabelMouseClicked(evt);
            }
        });

        closeLabel.setBackground(new java.awt.Color(0, 250, 154));
        closeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        closeLabel.setForeground(new java.awt.Color(255, 255, 255));
        closeLabel.setText("X");
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211)
                .addComponent(userLabel)
                .addGap(18, 18, 18)
                .addComponent(closeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(closeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        jPanel2.setBackground(new java.awt.Color(70, 130, 180));

        DBConnection dc = new DBConnection();
        Connection conn = dc.getConnection();

        String query = "SELECT user_id, user_name, password, user_type FROM users WHERE user_status=1;";

        Object columnNames[] = { "Staff ID", "Name", "Role", "Password"};

        //Object[] rowData;
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        //execute query and store data in resultset
        try {
            ResultSet rs = conn.createStatement().executeQuery(query);
            while (rs.next()) {
                Object rowData[] = {rs.getInt(1), rs.getString(2), userType(rs.getInt(4)), rs.getString(3)};
                model.addRow(rowData);
            }
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }

        usersTable.setModel(model);
        jScrollPane1.setViewportView(usersTable);

        usersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                tableRowsSelected(event);
            }
        });

        btnChooseSubjects.setText("SUBJECTS");
        btnChooseSubjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseSubjectsActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 250, 154));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Principal", "Class Teacher", "Teacher" }));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolgrades/search.png"))); // NOI18N
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolgrades/add.png"))); // NOI18N
        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolgrades/delete.png"))); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnDashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolgrades/back.png"))); // NOI18N
        btnDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDashboardActionPerformed(evt);
            }
        });

        subjectsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject", "Form", "Stream", "Year"
            }
        ));
        jScrollPane3.setViewportView(subjectsTable);
        if (subjectsTable.getColumnModel().getColumnCount() > 0) {
            subjectsTable.getColumnModel().getColumn(0).setHeaderValue("Subject");
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane3)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(btnSearch))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnChooseSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(btnDelete)
                        .addGap(93, 93, 93)
                        .addComponent(btnDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnChooseSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String userType(int user_type) {
        if (user_type == 1) {
            return "Principal";
        } else if (user_type == 2) {
            return "Class Teacher";
        }else if (user_type == 3) {
            return "Teacher";
        }else return "Admin";
    }

    private void tableRowsSelected(ListSelectionEvent event) {
        int userId = (int) usersTable.getValueAt(usersTable.getSelectedRow(), 0);
        String userType = (String) usersTable.getValueAt(usersTable.getSelectedRow(), 2);

        if (userType.equals("Class Teacher")) {
            setClassTeacherView(userId);
        }

        else if (!userType.equals("Teacher")) {
            jLabel2.setText("");
            btnChooseSubjects.setEnabled(false);
            subjectsTable.setModel(new DefaultTableModel());
        }

        else {
            btnChooseSubjects.setEnabled(true);
            btnChooseSubjects.setText("SUBJECTS");
            jLabel2.setText("Subjects");
            DBConnection dc = new DBConnection();
            Connection conn = dc.getConnection();

            String query = "SELECT subject_name, form, stream, year FROM teacher_subjects WHERE user_id="+userId+";";
            Object columnNames[] = { "Subject", "Form", "Stream", "Year"};

            //Object[] rowData;
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            //execute query and store data in resultset
            try {
                ResultSet rs = conn.createStatement().executeQuery(query);
                while (rs.next()) {
                    Object rowData[] = {rs.getString(1), rs.getInt(2), rs.getString(3), rs.getInt(4)};
                    model.addRow(rowData);
                }
            }
            catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
            finally {
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            }
            subjectsTable.setModel(model);
        }
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        String role = jComboBox1.getSelectedItem().toString();
        int user_role = 0;
        if (role.equals("Principal")) {
            user_role = 1;
        }else if (role.equals("Class Teacher")) {
            user_role = 2;
        }else if (role.equals("Teacher")) {
            user_role = 3;
        }

        DBConnection dc = new DBConnection();
        Connection conn = dc.getConnection();

        String query = "SELECT user_id, user_name, password, user_type FROM users WHERE user_status=1;";

        if (user_role != 0) {
            query = "SELECT user_id, user_name, password, user_type FROM users WHERE user_status=1 AND user_type="+user_role+";";
        }

        Object columnNames[] = { "Staff ID", "Name", "Role", "Password"};

        //Object[] rowData;
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        //execute query and store data in resultset
        try {
            ResultSet rs = conn.createStatement().executeQuery(query);
            while (rs.next()) {
                Object rowData[] = {rs.getInt(1), rs.getString(2), userType(rs.getInt(4)), rs.getString(3)};
                model.addRow(rowData);
            }
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }

        usersTable.setModel(model);
        jScrollPane1.setViewportView(usersTable);

        usersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                tableRowsSelected(event);
            }
        });
    }

    private void setClassTeacherView (int userId) {
        btnChooseSubjects.setText("CLASSES");
        jLabel2.setText("Classes");
        btnChooseSubjects.setEnabled(true);

        DBConnection dc = new DBConnection();
        Connection conn = dc.getConnection();

        String query = "SELECT form, stream, year FROM class_teachers WHERE user_id="+userId+";";
        Object columnNames[] = { "Form", "Stream", "Year"};

        //Object[] rowData;
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        //execute query and store data in resultset
        try {
            ResultSet rs = conn.createStatement().executeQuery(query);
            while (rs.next()) {
                Object rowData[] = {rs.getInt(1), rs.getString(2), rs.getInt(3)};
                model.addRow(rowData);
            }
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }

        subjectsTable.setModel(model);
    }

    private void btnChooseSubjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseSubjectsActionPerformed
        // take to choose subjects window
        if (usersTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "No User Selected");
            return;
        }

        int row = usersTable.getSelectedRow();
        String userType = (String) usersTable.getModel().getValueAt(row, 2);

        ChooseSubjects.userId = (int) usersTable.getModel().getValueAt(row, 0);
        ChooseSubjects.userType = (String) usersTable.getModel().getValueAt(row, 2);
        ChooseSubjects subjectselect = new ChooseSubjects();
        subjectselect.setVisible(true);
        subjectselect.pack();
        subjectselect.setLocationRelativeTo(null);
        subjectselect.setDefaultCloseOperation(subjectselect.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnChooseSubjectsActionPerformed

    private void btnDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDashboardActionPerformed
        // take to admin dashboard window
        AdminDashboard adminDash = new AdminDashboard();
        adminDash.setVisible(true);
        adminDash.pack();
        adminDash.setLocationRelativeTo(null);
        adminDash.setDefaultCloseOperation(adminDash.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnDashboardActionPerformed



    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // save data to db and json file
        
        
        //save message
        JOptionPane.showMessageDialog(null, "Saved successfully!");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        // close application
        System.exit(0);
    }//GEN-LAST:event_closeLabelMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int cordinateX = evt.getXOnScreen();
        int cordinateY = evt.getYOnScreen();
        
        this.setLocation(cordinateX - mouseX, cordinateY - mouseY);
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // delete user data from db and json file
        if (usersTable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "No User Selected");
            return;
        }

        int row = usersTable.getSelectedRow();
        int idDelete = (int) usersTable.getModel().getValueAt(row, 0);
        String nameDelete = usersTable.getModel().getValueAt(row, 1).toString();
        String roleDelete = usersTable.getModel().getValueAt(row, 2).toString();

        int confirm = JOptionPane.showConfirmDialog(null,"Delete "+roleDelete+" "+nameDelete+" ID: "+idDelete+"?");
        if (confirm == 1 || confirm == 2 || confirm == -1) {
            return;
        }

        DBConnection dc = new DBConnection();
        Connection conn = dc.getConnection();
        String deleteStudent = "UPDATE users SET status=0 WHERE user_id=?;";

        try {
            PreparedStatement stm = conn.prepareStatement(deleteStudent);
            stm.setInt(1, idDelete);
            stm.executeUpdate();

            JOptionPane.showMessageDialog(null, "User Deleted Successfully!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
        }

        // take to manage users window
        ui.ManageUsers mngUsers = new ui.ManageUsers();
        mngUsers.setVisible(true);
        mngUsers.pack();
        mngUsers.setLocationRelativeTo(null);
        mngUsers.setDefaultCloseOperation(mngUsers.EXIT_ON_CLOSE);
        this.dispose();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void userLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userLabelMouseClicked
        // TODO add your handling code here:
        AdminLogin adminlog = new AdminLogin();
        adminlog.setVisible(true);
        adminlog.pack();
        adminlog.setLocationRelativeTo(null);
        adminlog.setDefaultCloseOperation(adminlog.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_userLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseSubjects;
    private javax.swing.JButton btnDashboard;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable subjectsTable;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
